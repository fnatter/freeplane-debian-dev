--- a/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/LocationChoosenListener.java
+++ b/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/LocationChoosenListener.java
@@ -1,10 +1,11 @@
 package org.freeplane.plugin.openmaps;
 
 import org.openstreetmap.gui.jmapviewer.Coordinate;
+import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
 
 /**
  * @author Blair Archibald 
  */
 public interface LocationChoosenListener {
-	public void locationChoosenAction(Coordinate locationChoosen, int zoom);
+	public void locationChoosenAction(ICoordinate locationChoosen, int zoom);
 }
--- a/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/OpenMapsExtension.java
+++ b/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/OpenMapsExtension.java
@@ -2,6 +2,7 @@
 
 import org.freeplane.core.extension.IExtension;
 import org.openstreetmap.gui.jmapviewer.Coordinate;
+import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
 
 /**
  * @author Blair Archibald
@@ -33,7 +34,7 @@
 		location = new Coordinate(location_x, location_y);
 	}
 
-	public void updateLocation(Coordinate locationChoosen) {
+	public void updateLocation(ICoordinate locationChoosen) {
 		location = new Coordinate(locationChoosen.getLat(), locationChoosen.getLon());
 	}
 
--- a/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/OpenMapsNodeHook.java
+++ b/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/OpenMapsNodeHook.java
@@ -15,6 +15,7 @@
 import org.freeplane.plugin.openmaps.mapelements.OpenMapsDialog;
 import org.openstreetmap.gui.jmapviewer.Coordinate;
 import org.freeplane.plugin.openmaps.LocationChoosenListener;
+import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
 
 /**
  * @author Blair Archibald
@@ -49,7 +50,7 @@
 	
 
 	//Called when a location is chosen in the OpenMapsDialog - Only one location may be chosen at a time
-	public void locationChoosenAction(Coordinate locationChoosen, int zoom) {
+	public void locationChoosenAction(ICoordinate locationChoosen, int zoom) {
 		addChoosenLocationToSelectedNode(locationChoosen, zoom); 
 		map.getController().removeLocationChoosenListener(this);
 	}
@@ -101,7 +102,7 @@
 		}
 	}
 	
-	private void addChoosenLocationToSelectedNode(Coordinate locationChoosen, int zoom) {
+	private void addChoosenLocationToSelectedNode(ICoordinate locationChoosen, int zoom) {
 		final NodeModel node = getCurrentlySelectedNode();
 		OpenMapsExtension openMapsExtension = (OpenMapsExtension) node.getExtension(OpenMapsExtension.class);
 		
@@ -113,7 +114,7 @@
 		refreshNode(node);
 	}
 	
-	private void setLocationChoiceUndoable(final OpenMapsExtension extension, final Coordinate locationChoosen, final int zoomChoosen) {
+	private void setLocationChoiceUndoable(final OpenMapsExtension extension, final ICoordinate locationChoosen, final int zoomChoosen) {
 		final Coordinate currentLocation = extension.getLocation();
 		final int currentZoom = extension.getZoom();
 
@@ -127,11 +128,11 @@
 		}
 	}
 
-	private IActor createUndoActor(final OpenMapsExtension extension, final Coordinate newlyChoosenLocation, 
-			final Coordinate currentlyStoredLocation, final int newlyChoosenZoom , final int currentlyStoredZoom) {
+	private IActor createUndoActor(final OpenMapsExtension extension, final ICoordinate newlyChoosenLocation,
+			final ICoordinate currentlyStoredLocation, final int newlyChoosenZoom , final int currentlyStoredZoom) {
 		
 		return new IActor() {
-			private final Coordinate oldLocation = currentlyStoredLocation;
+			private final ICoordinate oldLocation = currentlyStoredLocation;
 			private final int oldZoom = currentlyStoredZoom;
 
 			public void act() {
--- a/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/mapelements/OpenMapsController.java
+++ b/freeplane_plugin_openmaps/src/org/freeplane/plugin/openmaps/mapelements/OpenMapsController.java
@@ -12,6 +12,7 @@
 import org.openstreetmap.gui.jmapviewer.JMapViewer;
 import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
 import org.openstreetmap.gui.jmapviewer.OsmMercator;
+import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
 
 /**
  * @author Blair Archibald
@@ -37,7 +38,7 @@
 	@Override
 	public void mouseClicked(MouseEvent e) {
 		 if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
-			final Coordinate locationChoosen = getSelectedLocation(e.getPoint());
+			final ICoordinate locationChoosen = getSelectedLocation(e.getPoint());
 			if (locationCount < 1) {
 				addMarkerToLocation(locationChoosen);
 				locationCount++;
@@ -54,13 +55,13 @@
 		Listeners.remove(listener);
 	}
 
-	private void sendLocation(Coordinate locationChoosen, int zoom) {
+	private void sendLocation(ICoordinate locationChoosen, int zoom) {
 		for (LocationChoosenListener l : Listeners) {
 			l.locationChoosenAction(locationChoosen, zoom);
 		}
 	}
 
-	public Coordinate getSelectedLocation(Point clickedLocation) {
+	public ICoordinate getSelectedLocation(Point clickedLocation) {
 		return map.getPosition(clickedLocation); 
 	}
 	
@@ -68,7 +69,7 @@
 		return map.getZoom();
 	}
 
-	private void addMarkerToLocation(final Coordinate locationChoosen) {
+	private void addMarkerToLocation(final ICoordinate locationChoosen) {
 		map.addMapMarker(new MapMarkerDot(locationChoosen.getLat(), locationChoosen.getLon()));
 	}
 	
@@ -77,12 +78,11 @@
 			addMarkerToLocation(location);
 			locationCount++;
 		}
+
+		final OsmMercator osmMercator = new OsmMercator();
 		
-		// this method is not available in JMapViewer >= 1.03!
-//		map.setDisplayPositionByLatLon(new Point(map.getWidth() / 2, map.getHeight() / 2), location.getLat(), location.getLon(), zoom);
-		
-        int x = (int)OsmMercator.LonToX(location.getLon(), zoom);
-        int y = (int)OsmMercator.LatToY(location.getLat(), zoom);
+        int x = (int)osmMercator.lonToX(location.getLon(), zoom);
+        int y = (int)osmMercator.latToY(location.getLat(), zoom);
 		map.setDisplayPosition(new Point(map.getWidth() / 2, map.getHeight() / 2), x, y, zoom);
 	}
 
