Description: change dependencies to /usr/share/java, where necessary,
  do not copy all dependencies to build/libs (eclipse hack);
  dop not copy debian jars to /usr/share/freeplane/**;
  copy only plugin-${project.version}.jar for plugins;
  externalize debian jars with a relative path in OSGi MANIFEST.MFs
  see README.source for an explanation of the (changes to the) build system
Author: Felix Natter <fnatter@gmx.net>
Forwarded: not-needed
Last-Update: 2016-02-04
--- a/build.gradle
+++ b/build.gradle
@@ -1,6 +1,6 @@
-plugins {
-  id "nebula.ospackage" version "4.4.0"
-}
+//plugins {
+//  id "nebula.ospackage" version "4.4.0"
+//}
 
 allprojects {
     // in a multi-project setup, all projects must have the same version number!
@@ -15,26 +15,45 @@
 		maven { url "http://www.knopflerfish.org/releases/6.1.0/maven2" }
         // this is necessary to grab both binary and source jars
         // for local (git) dependencies
-        flatDir name: 'localGitDepsRepository',
-                dirs: [rootDir.path + "/freeplane/lib",
-                       rootDir.path + "/freeplane_plugin_jsyntaxpane/lib"]
+	flatDir name: '/usr/share/java', dir: '/usr/share/java'
     }
 
 }
 
+def isDebianJar(File jar) {
+    def ret = jar.path.startsWith("/usr/share/java/") ||
+              jar.path.startsWith("/usr/share/maven-repo/")
+    return ret;
+}
+
+def relpath(File basePath, File targetPath) {
+    def relPath = ""
+    // targetPath is either '/usr/share/java/**' or '/usr/share/maven-repo/**'!
+    def commonPrefix = '/usr/share'
+    def parent = basePath
+    while (parent.path != commonPrefix) {
+        parent = parent.parentFile
+        relPath += '../'
+    }
+    def targetPathRel = targetPath.path.replaceFirst(/^${commonPrefix}/, '').substring(1)
+    relPath += targetPathRel
+}
+
 // this is used for (linux) packages, where the dependencies
 // live on the file system (/usr/share/java/*.jar on Debian):
 def externalizeJar(File jar) {
-    // do not externalize, jars are copied over to /BUILD
-    // in development workflow!
-    return "lib/${jar.name}"
+    final BUNDLE_PATH = "/usr/share/freeplane/core/org.freeplane.core/"
+    if (isDebianJar(jar)) {
+        return relpath(new File(BUNDLE_PATH), jar)
+    } else {
+        return "lib/${jar.name}"
+    }
 }
 
 // this is overridden in linux packages where this might be named
 // knopflerfish-framework.jar
 def isKnopflerfishJar(fileName) {
-    return fileName.startsWith('framework-') &&
-           fileName.endsWith('.jar');
+    return fileName == 'knopflerfish-framework.jar'
 }
 
 def filterAndExternalizePluginDependencies(runtime_files) {
@@ -80,12 +99,6 @@
       failOnError = false  
     }
 
-    repositories {
-       maven  {
-        url "http://repo1.maven.org/maven2"
-       }
-    }
-
     dependencies {
         testCompile 'junit:junit:4.11'
         testCompile 'org.assertj:assertj-core:2.6.0'
@@ -117,14 +130,9 @@
 // OSGi projects (/plugin/, freeplane) need this for compilation (e.g. resolve Bundle),
 // and freeplane_framework needs to copy it to BUILD/framework.jar
 configure(subprojects.findAll {it.name =~ /plugin/ || it.name =~ /^freeplane$/ || it.name =~ /^freeplane_framework$/}){
-    repositories {
-        maven {
-            url 'https://dl.bintray.com/knopflerfish/knopflerfish-maven/'
-        }
-    }
-
     dependencies {
-        compile group: 'org.knopflerfish.kf6', name:'framework', version: '8.0.4'
+        //compile group: 'org.knopflerfish.kf6', name:'framework', version: '8.0.4'
+	compile ':knopflerfish-framework'
     }
 }
 
@@ -137,11 +145,13 @@
     else
        ext.pluginid = project.name.replace("freeplane_plugin_", "org.freeplane.plugin.")
 
-    task copyDeps(type: Copy) {
-        from project.configurations.runtime
-        into "$buildDir/libs"
-    }
-    jar.dependsOn copyDeps
+    // this is a hack for eclipse which does not allow to export jars
+    // outside of the project directory!
+    //task copyDeps(type: Copy) {
+    //    from project.configurations.runtime
+    //    into "$buildDir/libs"
+    //}
+    //jar.dependsOn copyDeps
 
     task filterOSGiManifestForEclipse(type: Copy) {
         from('build/tmp/jar/MANIFEST.MF') {
@@ -193,18 +203,9 @@
 configure(subprojects.findAll {it.name =~ /plugin/ }) {
 
     task copyOSGiJars(type: Copy) {
-        from ("$buildDir/libs") {
-            include("*.jar")
-            // TODO: this is redundant with regard to 'filterPluginDeps' (see above)!
-            exclude('framework-*.jar')
-            exclude('knopflerfish-framework*.jar')
-            exclude('freeplane-' + project.version + '.jar')
-            exclude('freeplane_plugin_*-' + project.version + '.jar')
-        }
-        from ('lib') {
-            include("*.jar")
-            exclude('*-sources.jar')
-        }
+	from ("$buildDir/libs") {
+	    include("plugin-${project.version}.jar")
+	}
         into(globalBin + '/plugins/' + pluginid + '/lib/')
     }
 
--- a/freeplane/build.gradle
+++ b/freeplane/build.gradle
@@ -5,8 +5,10 @@
 
 dependencies {
 	
-	mergedViewerDependencies 'org.dpolivaev.mnemonicsetter:mnemonicsetter:0.5'
-	compile ':kitfox-svg-salamander-1.1.1-p1'
+	//mergedViewerDependencies 'org.dpolivaev.mnemonicsetter:mnemonicsetter:0.5'
+	compile 'org.dpolivaev.mnemonicsetter:mnemonicsetter:0.5'
+	//compile ':kitfox-svg-salamander-1.1.1-p1'
+	compile ':svgSalamander'
 	
     compile project(':JOrtho_0.4_freeplane')
 
@@ -14,19 +16,17 @@
             'commons-io:commons-io:2.4',
             'commons-codec:commons-codec:1.7',
             'com.jgoodies:jgoodies-forms:1.9.0',
-            'com.jgoodies:jgoodies-common:1.8.1'
+            //'com.jgoodies:jgoodies-common:1.8.1'
+	    ':idw'
 
 	compile  ('com.lightdev.app.shtm.simplyhtml:SimplyHTML:0.17.3') {
 		exclude module: 'javahelp'
 		exclude module: 'mnemonicsetter'
 	}
     
-    testCompile 'junit:junit:4.12',
-                'org.hamcrest:hamcrest-all:1.3',
-                'org.mockito:mockito-all:1.10.19'        
-
-    // from flatDir "localGitDepsRepository":
-    compile ':idw-gpl-1.6.1'
+    //testCompile 'junit:junit:4.12',
+    //            'org.hamcrest:hamcrest-all:1.3',
+    //            'org.mockito:mockito-all:1.10.19'
 }
 
 sourceSets {
@@ -187,16 +187,17 @@
 }
 
 task copyOSGiJars(type: Copy) {
-     from ("$buildDir/libs") {
-          include("*.jar")
-		  exclude('framework-*.jar')
-		  exclude('freeplane-*.jar')
-		  exclude('mnemonicsetter-*.jar')
-		  
+     from (configurations.runtime.files) {
+	 // do not copy debian jars!
+         exclude {
+             FileTreeElement jarFileTreeElement ->
+	       isDebianJar(jarFileTreeElement.file)
+         }
      }
-     from ('lib') {
-          include("*.jar")
-          exclude('*-sources.jar')
+     from ("$buildDir/libs") {
+         include("*.jar")
+         exclude('framework-*.jar')
+	 exclude('freeplane-*.jar')
      }
      into(globalBin + '/core/' + pluginid + '/lib/')
 }
@@ -321,7 +322,7 @@
 jar.dependsOn viewerJar
 jar.dependsOn editorJar
 jar.dependsOn osgiJar
-jar.dependsOn copyDeps
+//jar.dependsOn copyDeps
 build.dependsOn copyOSGiJars
 build.dependsOn copyOSGiManifest
 build.dependsOn copyExternalResources
--- a/freeplane_plugin_jsyntaxpane/build.gradle
+++ b/freeplane_plugin_jsyntaxpane/build.gradle
@@ -5,7 +5,8 @@
     // from flatDir "localGitDepsRepository":
     // from the Debian "libjsyntaxpane-java" package:
     // https://anonscm.debian.org/cgit/pkg-java/libjsyntaxpane-java.git
-    compile ':jsyntaxpane-0.9.6~r156-7' 
+    //compile ':jsyntaxpane-0.9.6~r156-7'
+    compile ':jsyntaxpane'
 }
 
 jar {
--- a/freeplane_plugin_openmaps/build.gradle
+++ b/freeplane_plugin_openmaps/build.gradle
@@ -8,7 +8,8 @@
 dependencies {
     compileOnly project(':freeplane')
 
-    compile 'org.openstreetmap.jmapviewer:jmapviewer:1.14'
+    //compile 'org.openstreetmap.jmapviewer:jmapviewer:1.14'
+    compile ':jmapviewer'
 }
 
 jar {
--- a/freeplane_plugin_script/build.gradle
+++ b/freeplane_plugin_script/build.gradle
@@ -4,10 +4,10 @@
     compileOnly project(':freeplane_plugin_jsyntaxpane')
 	testCompile project(':freeplane_plugin_jsyntaxpane')
     compile 'org.codehaus.groovy:groovy-all:2.3.1'
-	compile ('org.freeplane.securegroovy:groovy-patcher:0.0.2') {
-		transitive = false
-	}
-    compile 'net.bytebuddy:byte-buddy:1.7.9'
+	//compile ('org.freeplane.securegroovy:groovy-patcher:0.0.2') {
+	//	transitive = false
+	//}
+    //compile 'net.bytebuddy:byte-buddy:1.7.9'
 }
 
 tasks.withType(JavaCompile) {
--- a/dist.gradle
+++ b/dist.gradle
@@ -33,7 +33,7 @@
 apply from: './win.dist.gradle'
 apply from: './mac.dist.gradle'
 apply from: './src.dist.gradle'
-apply from: './linux-packages.gradle'
+//apply from: './linux-packages.gradle'
 
 // meta task
 task dist {
@@ -44,7 +44,7 @@
     dependsOn windowsPortableInstaller
     dependsOn gitinfoDist
     dependsOn historyDist
-    dependsOn freeplaneDeb
+    //dependsOn freeplaneDeb
 }
 
 // clean
--- a/freeplane_plugin_svg/build.gradle
+++ b/freeplane_plugin_svg/build.gradle
@@ -1,16 +1,58 @@
+// dependencies {
+//     compileOnly project(':freeplane')
+// 	testCompile project(':freeplane')
+
+// 	// libbatik-java / batik-*.jar:
+// 	compile ('org.apache.xmlgraphics:batik-transcoder:1.9.1')
+	
+// 	compile 'org.apache.xmlgraphics:batik-swing:1.9.1'
+// 	compile 'org.apache.xmlgraphics:batik-codec:1.9.1'
+// 	compile 'org.apache.xmlgraphics:fop:2.1'
+// 	compile 'commons-logging:commons-logging:1.2'
+// }
+
 dependencies {
     compileOnly project(':freeplane')
 	testCompile project(':freeplane')
 
 	// libbatik-java / batik-*.jar:
-	compile ('org.apache.xmlgraphics:batik-transcoder:1.9.1')
+	compile ('org.apache.xmlgraphics:batik-all:1.9.1') {
+		transitive = false
+	}
 	
-	compile 'org.apache.xmlgraphics:batik-swing:1.9.1'
-	compile 'org.apache.xmlgraphics:batik-codec:1.9.1'
-	compile 'org.apache.xmlgraphics:fop:2.1'
+	// libxml-commons-external-java 1.4.01:
+	// org.w3c.dom.svg.SVGDocument
+	//compile 'org.apache.xmlgraphics:xmlgraphics-commons:2.2': does not help!
+	compile 'xml-apis:xml-apis:1.4.01'
+	compile 'xml-apis:xml-apis-ext:1.3.04'
+	
+	// org.apache.xmlgraphics.java2d.color.NamedColorSpace
+	// libxmlgraphics-commons-java / xmlgraphics-commons.jar:
+	compile (group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.2') {
+		transitive = false
+	}
+
+	// libfop-java / fop.jar:
+	compile (group: 'org.apache.xmlgraphics', name: 'fop', version: '2.1') {
+		transitive = false
+	}
+
+	// libavalon-framework-java / avalon-framework.jar:
+	// PDF problem: org.apache.avalon.framework.configuration.Configurable
+	// PDF problem: org.apache.avalon.framework.configuration.DefaultConfiguration
+	compile group: 'org.apache.avalon.framework', name: 'avalon-framework-impl', version: '4.3.1'
+
+	// libcommons-logging-java / commons-logging.jar:
+	// PDF problem: org.apache.commons.logging.Log
 	compile 'commons-logging:commons-logging:1.2'
+
+	// PDF problem: org.apache.commons.io.output.ByteArrayOutputStream
+	// PDF problem: org.apache.commons.io.IOUtils
+	// PDF problem: org.apache.commons.io.filefilter.IOFileFilter
+	// --> import from core bundle!
 }
 
+
 configurations.all {
     exclude module: 'jython' 
     exclude module: 'rhino' 
