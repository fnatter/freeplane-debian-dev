dependencies {
    compileOnly project(':freeplane')
	testCompile project(':freeplane')
    compileOnly project(':freeplane_plugin_jsyntaxpane')
	testCompile project(':freeplane_plugin_jsyntaxpane')
	compileOnly 'org.codehaus.groovy:groovy-all:2.4.8'
	runtime ('org.codehaus.groovy:groovy-all:2.5.4') {
		exclude group:'org.codehaus.groovy', module:'groovy-test'
		exclude group:'org.codehaus.groovy', module:'groovy-test-junit5'
		exclude group:'org.codehaus.groovy', module:'groovy-testng'
		exclude group:'org.codehaus.groovy', module:'groovy-ant'
		exclude group:'org.codehaus.groovy', module:'groovy-docgenerator'
		exclude group:'org.codehaus.groovy', module:'groovy-groovydoc'
		exclude group:'org.codehaus.groovy', module:'groovy-cli-commons'
		exclude group:'org.codehaus.groovy', module:'groovy-cli-picocli'
	}
	runtime 'org.codehaus.groovy:groovy-dateutil:2.5.4'
	runtime 'org.apache.ivy:ivy:2.4.0'

}

tasks.withType(JavaCompile) {
	if (JavaVersion.current().isJava8Compatible())
		options.compilerArgs << '-parameters'
}

jar {
    manifest {
        name = pluginid
        symbolicName = pluginid

        def deps = filterAndExternalizePluginDependencies(configurations.runtime.files)
        deps.add(0, "lib/plugin-" + project.version + '.jar')

        attributes 'Class-Path': deps.join(', ')
        attributes 'Bundle-ClassPath': '., ' + deps.join(', ')

        instruction 'Bundle-Vendor', 'Freeplane Project'
        instruction 'Bundle-Activator', pluginid + ".Activator"
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.8'

        def imports = """\
                      org.osgi.framework;version="1.3.0",
                      ${project(':freeplane').jar.manifest.attributes.get('Export-Package')},
                      ${project(':freeplane_plugin_jsyntaxpane').jar.manifest.attributes.get('Export-Package')}
                      """
        instruction 'Import-Package', imports.replaceAll("\\s+", "")
        // avoid that bnd creates Private-Package: for org.freeplane.plugin.script.*!
        instruction 'Private-Package', ''

        def exports = """\
                      org.freeplane.plugin.script,
                      org.freeplane.plugin.script.addons,
                      org.freeplane.plugin.script.dependencies,
                      org.freeplane.plugin.script.filter,
                      org.freeplane.plugin.script.proxy
                      """
        // bnd f**cks up the exports, so we bypass it using attributes!
        attributes 'Export-Package': exports.replaceAll("\\s+", "")
        
        // Require-Bundle is ignored by bnd => replaced by Import-Package!
        //instruction 'Require-Bundle', 'org.freeplane.core;bundle-version="1.0.1"'
    }
}

task copyScripts(type: Copy) {
    from('scripts/') {
        include('*.groovy')
    }
    into(globalBin + '/scripts')
}

javadoc {
    enabled = true
    
    title = "Freeplane API ${project.version}"

    source = fileTree(dir: 'src/main/java')
      .include('**/Proxy.java')
      .include('**/Convertible.java')
      .include('**/FreeplaneScriptBaseClass.java')
      .include('**/ScriptUtils.java') +
		fileTree(dir: '../freeplane_api/src/main/java')
		  .include('**/api/*.java') +
		fileTree(dir: '../freeplane/src/main/java')
		  .include('**/UITools.java')
		  .include('**/TextUtils.java')
		  .include('**/FreeplaneVersion.java')
		  .include('**/HtmlUtils.java')
		  .include('**/LogUtils.java')
		  .include('**/MenuUtils.java') + fileTree(dir: '../freeplane_framework/src/main/java')
		  .include('**/Launcher.java')
  

    destinationDir = new File(globalBin + '/doc/api/')
}

// TODO: this doesn't work yet!
/*
task zipJavadoc(type: Zip) {
  baseName = 'scripting-api'
  from (globalBin + '/doc/api/') {
      include('**')
  }
  destinationDir = new File(globalBin)
  dependsOn javadoc
}
*/

build.dependsOn copyScripts
build.dependsOn javadoc
//build.dependsOn zipJavadoc
